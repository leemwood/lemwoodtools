plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'io.gitlab.arturbosch.detekt' version '1.23.4'
    id 'org.owasp.dependencycheck' version '12.1.3'
}

android {
    namespace 'cn.lemwood.lemwoodtools'
    compileSdk 34

    defaultConfig {
        applicationId "cn.lemwood.lemwoodtools"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        // Build config fields for different environments
        buildConfigField "String", "BUILD_TIME", "\"${new Date().format('yyyy-MM-dd HH:mm:ss')}\""
        buildConfigField "boolean", "ENABLE_LOGGING", "true"
    }

    signingConfigs {
        release {
            // Use environment variables for CI/CD, fallback to default values for local development
            storeFile file(project.hasProperty('SIGNING_STORE_FILE') ? project.property('SIGNING_STORE_FILE') : 'lemwood.jks')
            storePassword project.hasProperty('SIGNING_STORE_PASSWORD') ? project.property('SIGNING_STORE_PASSWORD') : System.getenv('SIGNING_STORE_PASSWORD') ?: 'lemwood'
            keyAlias project.hasProperty('SIGNING_KEY_ALIAS') ? project.property('SIGNING_KEY_ALIAS') : System.getenv('SIGNING_KEY_ALIAS') ?: 'lemwood'
            keyPassword project.hasProperty('SIGNING_KEY_PASSWORD') ? project.property('SIGNING_KEY_PASSWORD') : System.getenv('SIGNING_KEY_PASSWORD') ?: 'lemwood'
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            buildConfigField "boolean", "ENABLE_LOGGING", "true"
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }
        
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            buildConfigField "boolean", "ENABLE_LOGGING", "false"
            
            // Additional optimizations
            zipAlignEnabled true
            crunchPngs true
        }
        
        // Staging build type for testing release configurations
        staging {
            initWith release
            debuggable true
            applicationIdSuffix ".staging"
            versionNameSuffix "-staging"
            buildConfigField "boolean", "ENABLE_LOGGING", "true"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        
        // Enable core library desugaring for newer APIs on older devices
        coreLibraryDesugaringEnabled true
    }

    kotlinOptions {
        jvmTarget = '1.8'
        
        // Enable experimental features
        freeCompilerArgs += [
            "-opt-in=androidx.compose.material3.ExperimentalMaterial3Api",
            "-opt-in=androidx.compose.foundation.ExperimentalFoundationApi",
            "-opt-in=androidx.compose.animation.ExperimentalAnimationApi"
        ]
    }

    buildFeatures {
        compose true
        buildConfig true
        viewBinding false
        dataBinding false
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.5.8'
    }

    packaging {
        resources {
            excludes += [
                '/META-INF/{AL2.0,LGPL2.1}',
                '/META-INF/DEPENDENCIES',
                '/META-INF/LICENSE',
                '/META-INF/LICENSE.txt',
                '/META-INF/license.txt',
                '/META-INF/NOTICE',
                '/META-INF/NOTICE.txt',
                '/META-INF/notice.txt',
                '/META-INF/ASL2.0',
                '/META-INF/*.kotlin_module'
            ]
        }
    }

    // Lint configuration
    lint {
        abortOnError false
        checkReleaseBuilds true
        disable 'InvalidPackage', 'OldTargetApi'
        warningsAsErrors false
        xmlReport true
        htmlReport true
    }

    // Test options
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
        animationsDisabled = true
    }

    // Bundle configuration for app bundles
    bundle {
        language {
            enableSplit = true
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }
}

dependencies {
    // Core Android libraries
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0'
    implementation 'androidx.activity:activity-compose:1.8.2'

    // Compose BOM
    implementation platform('androidx.compose:compose-bom:2024.02.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'
    implementation 'androidx.compose.material:material-icons-extended'

    // Navigation
    implementation 'androidx.navigation:navigation-compose:2.7.6'

    // Material Design Components (for traditional views if needed)
    implementation 'com.google.android.material:material:1.10.0'

    // ViewModel
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.7.0'

    // Core library desugaring
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'

    // Testing
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation platform('androidx.compose:compose-bom:2024.02.00')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    
    // Debug tools
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
}

// Detekt configuration
detekt {
    config.setFrom("$rootDir/detekt.yml")
    buildUponDefaultConfig = true
    allRules = false
    
    reports {
        html.required = true
        xml.required = true
        txt.required = true
        sarif.required = true
        md.required = false
    }
}

// Dependency Check configuration
dependencyCheck {
    outputDirectory = "$buildDir/reports"
    format = 'ALL'
    suppressionFile = "$rootDir/dependency-check-suppressions.xml"
    
    analyzers {
        experimentalEnabled = true
        archiveEnabled = true
        jarEnabled = true
        centralEnabled = true
        nexusEnabled = false
        pyDistributionEnabled = false
        pyPackageEnabled = false
        rubygemsEnabled = false
        opensslEnabled = false
        cmakeEnabled = false
        autoconfEnabled = false
        composerEnabled = false
        nodeEnabled = false
        nodeAuditEnabled = false
        retirejs {
            enabled = false
        }
    }
    
    nvd {
        apiKey = System.getenv('NVD_API_KEY') ?: ''
        delay = 16000
    }
}

// Custom tasks for code quality
tasks.register('codeQuality') {
    dependsOn 'detekt', 'lintDebug', 'dependencyCheckAnalyze'
    group = 'verification'
    description = 'Run all code quality checks'
}

// Make check task depend on our code quality checks
tasks.named('check') {
    dependsOn 'codeQuality'
}