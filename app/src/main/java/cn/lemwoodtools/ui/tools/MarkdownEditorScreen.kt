package cn.lemwoodtools.ui.tools

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.text.BasicTextField
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.clickable
import androidx.compose.foundation.background
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.Edit
import androidx.compose.material.icons.filled.Save
import androidx.compose.material.icons.filled.Folder
import androidx.compose.material.icons.filled.MoreVert
import androidx.compose.material.icons.filled.Menu
import androidx.compose.material.icons.filled.CreateNewFolder
import androidx.compose.material.icons.filled.ViewSidebar
import androidx.compose.material.icons.filled.EditNote
import androidx.compose.material.icons.filled.Preview
import androidx.compose.material3.BadgedBox
import androidx.compose.material3.Badge
import androidx.compose.material3.DropdownMenu
import androidx.compose.material3.DropdownMenuItem
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import kotlinx.coroutines.launch

/**
 * ÁºñËæëÂô®Ê®°ÂºèÊûö‰∏æ
 */
enum class EditorMode {
    SPLIT,    // ÂàÜÂ±èÊ®°ÂºèÔºàÁºñËæë+È¢ÑËßàÔºâ
    EDIT,     // ÂÆåÂÖ®ÁºñËæëÊ®°Âºè
    PREVIEW   // ÂÆåÂÖ®È¢ÑËßàÊ®°Âºè
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun MarkdownEditorScreen(onBackClick: () -> Unit) {
    val context = LocalContext.current
    val coroutineScope = rememberCoroutineScope()
    
    // Áä∂ÊÄÅÁÆ°ÁêÜ
    var markdownText by remember { mutableStateOf("# MarkdownÁºñËæëÂô®\n\nÊ¨¢Ëøé‰ΩøÁî®Êü†Êû∫Â∑•ÂÖ∑ÁÆ±ÁöÑMarkdownÁºñËæëÂô®ÔºÅ\n\n## ÂäüËÉΩÁâπÊÄß\n\n- ‚úèÔ∏è **ÂÆûÊó∂ÁºñËæë** - Â∑¶‰æßÁºñËæëÔºåÂè≥‰æßÈ¢ÑËßà\n- üëÄ **ÂÆûÊó∂È¢ÑËßà** - ÊâÄËßÅÂç≥ÊâÄÂæó\n- üìÅ **Êñá‰ª∂Êìç‰Ωú** - ÂØºÂÖ•„ÄÅÂØºÂá∫„ÄÅÈáçÂëΩÂêç\n- üé® **ËØ≠Ê≥ïÈ´ò‰∫Æ** - ÊîØÊåÅMarkdownËØ≠Ê≥ï\n- üìÇ **Êñá‰ª∂ÁÆ°ÁêÜ** - ÂÆåÊï¥ÁöÑÂ∑•‰ΩúÂå∫Êñá‰ª∂ÁÆ°ÁêÜ\n- üíæ **Ëá™Âä®‰øùÂ≠ò** - ÊîØÊåÅËá™Âä®‰øùÂ≠òÂäüËÉΩ\n\n## ‰ΩøÁî®ÊñπÊ≥ï\n\n1. Âú®Â∑¶‰æßÁºñËæëÂå∫ÁºñÂÜôMarkdownÂÜÖÂÆπ\n2. Âè≥‰æß‰ºöËá™Âä®ÊòæÁ§∫È¢ÑËßàÊïàÊûú\n3. ‰ΩøÁî®Â∑•ÂÖ∑Ê†èËøõË°åÊñá‰ª∂Êìç‰Ωú\n4. ÊîØÊåÅÊñá‰ª∂ÂØºÂÖ•ÂØºÂá∫ÂíåÂàÜ‰∫´\n\n```javascript\n// ‰ª£Á†ÅÂùóÁ§∫‰æã\nfunction hello() {\n    console.log(\"Hello, Markdown!\");\n}\n```") }
    var fileName by remember { mutableStateOf("Êú™ÂëΩÂêçÊñáÊ°£.md") }
    var lastSavedContent by remember { mutableStateOf(markdownText) }
    var editorMode by remember { mutableStateOf(EditorMode.SPLIT) }
    var hasUnsavedChanges by remember { mutableStateOf(false) }
    var showSaveDialog by remember { mutableStateOf(false) }
    var showFileManager by remember { mutableStateOf(false) }
    var showImportExport by remember { mutableStateOf(false) }
    var autoSaveEnabled by remember { mutableStateOf(true) }
    
    // Ëá™Âä®‰øùÂ≠òÈÄªËæë
    LaunchedEffect(markdownText) {
        if (autoSaveEnabled && markdownText != lastSavedContent) {
            hasUnsavedChanges = true
            kotlinx.coroutines.delay(2000) // 2ÁßíÂêéËá™Âä®‰øùÂ≠ò
            if (hasUnsavedChanges) {
                coroutineScope.launch {
                    if (FileManager.saveMarkdownFile(context, fileName, markdownText)) {
                        lastSavedContent = markdownText
                        hasUnsavedChanges = false
                    }
                }
            }
        }
    }
    
    Column(modifier = Modifier.fillMaxSize()) {
        // Â¢ûÂº∫Â∑•ÂÖ∑Ê†è
        EnhancedToolbar(
            fileName = fileName,
            onFileNameChange = { newName -> fileName = newName },
            editorMode = editorMode,
            onEditorModeChange = { newMode -> editorMode = newMode },
            onSaveClick = { showSaveDialog = true },
            onFileManagerClick = { showFileManager = true },
            onImportExportClick = { showImportExport = true },
            onBackClick = onBackClick,
            hasUnsavedChanges = hasUnsavedChanges
        )
        
        // ÁºñËæëÂô®ÂÜÖÂÆπÂå∫Âüü
        when (editorMode) {
            EditorMode.SPLIT -> {
                // ÂàÜÂ±èÊ®°Âºè
                Row(modifier = Modifier.fillMaxSize()) {
                    // ÁºñËæëÂå∫Âüü
                    EditorArea(
                        markdownText = markdownText,
                        onMarkdownTextChange = { newText -> markdownText = newText },
                        modifier = Modifier.weight(1f)
                    )
                    
                    // È¢ÑËßàÂå∫Âüü
                    PreviewArea(
                        markdownText = markdownText,
                        modifier = Modifier.weight(1f)
                    )
                }
            }
            EditorMode.EDIT -> {
                // ÂÆåÂÖ®ÁºñËæëÊ®°Âºè
                EditorArea(
                    markdownText = markdownText,
                    onMarkdownTextChange = { newText -> markdownText = newText },
                    modifier = Modifier.fillMaxSize()
                )
            }
            EditorMode.PREVIEW -> {
                // ÂÆåÂÖ®È¢ÑËßàÊ®°Âºè
                PreviewArea(
                    markdownText = markdownText,
                    modifier = Modifier.fillMaxSize()
                )
            }
        }
    }
    
    // Êñá‰ª∂ÁÆ°ÁêÜÂØπËØùÊ°Ü
        if (showFileManager) {
            FileManagerDialog(
                onFileSelected = { selectedFileName, content ->
                    fileName = selectedFileName
                    markdownText = content
                    lastSavedContent = content
                    hasUnsavedChanges = false
                    showFileManager = false
                },
                onDismiss = { showFileManager = false }
            )
        }
        
        // ‰øùÂ≠òÂØπËØùÊ°Ü
        if (showSaveDialog) {
            SaveFileDialog(
                fileName = fileName,
                onFileNameChange = { newName -> fileName = newName },
                onSave = { 
                    coroutineScope.launch {
                        FileManager.saveMarkdownFile(context, fileName, markdownText)
                        lastSavedContent = markdownText
                        hasUnsavedChanges = false
                        showSaveDialog = false
                    }
                },
                onCancel = { showSaveDialog = false }
            )
        }
        
        // ÂØºÂÖ•ÂØºÂá∫ÂØπËØùÊ°Ü
        if (showImportExport) {
            ImportExportManager(
                fileName = fileName,
                content = markdownText,
                onImport = { newName, content ->
                    fileName = newName
                    markdownText = content
                    lastSavedContent = content
                    hasUnsavedChanges = false
                    showImportExport = false
                },
                onExport = { 
                    // ÂØºÂá∫ÂÆåÊàêÂêéÂÖ≥Èó≠ÂØπËØùÊ°Ü
                    showImportExport = false
                },
                onShare = {
                    FileManager.shareFile(context, fileName, markdownText)
                    showImportExport = false
                }
            )
        }
}

/**
 * ‰øùÂ≠òÊñá‰ª∂ÂØπËØùÊ°Ü
 */
@Composable
fun SaveFileDialog(
    fileName: String,
    onFileNameChange: (String) -> Unit,
    onSave: () -> Unit,
    onCancel: () -> Unit
) {
    AlertDialog(
        onDismissRequest = onCancel,
        title = { Text("‰øùÂ≠òÊñá‰ª∂") },
        text = {
            Column {
                OutlinedTextField(
                    value = fileName,
                    onValueChange = onFileNameChange,
                    label = { Text("Êñá‰ª∂Âêç") },
                    modifier = Modifier.fillMaxWidth()
                )
                Text(
                    text = "Êñá‰ª∂Â∞Ü‰øùÂ≠òÂà∞Â∑•‰ΩúÂå∫Êñá‰ª∂Â§π",
                    style = MaterialTheme.typography.bodySmall,
                    color = MaterialTheme.colorScheme.onSurfaceVariant,
                    modifier = Modifier.padding(top = 8.dp)
                )
            }
        },
        confirmButton = {
            TextButton(onClick = onSave) {
                Text("‰øùÂ≠ò")
            }
        },
        dismissButton = {
            TextButton(onClick = onCancel) {
                Text("ÂèñÊ∂à")
            }
        }
    )
}

/**
 * ÁºñËæëÂå∫Âüü
 */
@Composable
fun EditorArea(
    markdownText: String,
    onMarkdownTextChange: (String) -> Unit,
    modifier: Modifier = Modifier
) {
    Card(
        modifier = modifier.padding(8.dp),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Column(modifier = Modifier.fillMaxSize()) {
            // Ê†áÈ¢òÊ†è
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(48.dp)
                    .background(MaterialTheme.colorScheme.primaryContainer),
                contentAlignment = Alignment.CenterStart
            ) {
                Text(
                    text = "ÁºñËæëÂå∫",
                    style = MaterialTheme.typography.titleMedium,
                    color = MaterialTheme.colorScheme.onPrimaryContainer,
                    modifier = Modifier.padding(horizontal = 16.dp)
                )
            }
            
            // ÁºñËæëÊ°Ü
            BasicTextField(
                value = markdownText,
                onValueChange = onMarkdownTextChange,
                modifier = Modifier
                    .fillMaxSize()
                    .padding(16.dp)
            )
        }
    }
}

/**
 * È¢ÑËßàÂå∫Âüü
 */
@Composable
fun PreviewArea(
    markdownText: String,
    modifier: Modifier = Modifier
) {
    Card(
        modifier = modifier.padding(8.dp),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Column(modifier = Modifier.fillMaxSize()) {
            // Ê†áÈ¢òÊ†è
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(48.dp)
                    .background(MaterialTheme.colorScheme.secondaryContainer),
                contentAlignment = Alignment.CenterStart
            ) {
                Text(
                    text = "È¢ÑËßàÂå∫",
                    style = MaterialTheme.typography.titleMedium,
                    color = MaterialTheme.colorScheme.onSecondaryContainer,
                    modifier = Modifier.padding(horizontal = 16.dp)
                )
            }
            
            // È¢ÑËßàÂÜÖÂÆπ
            MarkdownPreview(
                markdownText = markdownText,
                modifier = Modifier.fillMaxSize()
            )
        }
    }
}

/**
 * Â¢ûÂº∫Â∑•ÂÖ∑Ê†è
 */
@Composable
fun EnhancedToolbar(
    fileName: String,
    onFileNameChange: (String) -> Unit,
    editorMode: EditorMode,
    onEditorModeChange: (EditorMode) -> Unit,
    onSaveClick: () -> Unit,
    onFileManagerClick: () -> Unit,
    onImportExportClick: () -> Unit,
    onBackClick: () -> Unit,
    hasUnsavedChanges: Boolean = false
) {
    var showRenameDialog by remember { mutableStateOf(false) }
    var showMoreMenu by remember { mutableStateOf(false) }
    
    // ‰ΩøÁî®ÁÆÄÂçïÁöÑBoxÂ∏ÉÂ±ÄÊõø‰ª£TopAppBar
    Box(
        modifier = Modifier
            .fillMaxWidth()
            .height(56.dp)
            .background(MaterialTheme.colorScheme.primary)
    ) {
        Row(
            modifier = Modifier.fillMaxSize(),
            verticalAlignment = Alignment.CenterVertically
        ) {
            // ËøîÂõûÊåâÈíÆ
            IconButton(onClick = onBackClick) {
                Icon(Icons.Filled.ArrowBack, contentDescription = "ËøîÂõû", tint = MaterialTheme.colorScheme.onPrimary)
            }
            
            // Ê†áÈ¢òÔºàÊòæÁ§∫Êñá‰ª∂ÂêçÂíå‰øùÂ≠òÁä∂ÊÄÅÔºâ
            Column(
                modifier = Modifier.weight(1f).padding(horizontal = 16.dp)
            ) {
                Text(
                    text = fileName,
                    maxLines = 1,
                    overflow = TextOverflow.Ellipsis,
                    color = MaterialTheme.colorScheme.onPrimary,
                    style = MaterialTheme.typography.bodyLarge
                )
                if (hasUnsavedChanges) {
                    Text(
                        text = "Êú™‰øùÂ≠ò",
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onPrimary.copy(alpha = 0.7f)
                    )
                }
            }
            
            // Ê®°ÂºèÂàáÊç¢ÊåâÈíÆ
            IconButton(onClick = { 
                onEditorModeChange(when (editorMode) {
                    EditorMode.SPLIT -> EditorMode.EDIT
                    EditorMode.EDIT -> EditorMode.PREVIEW
                    EditorMode.PREVIEW -> EditorMode.SPLIT
                })
            }) {
                Icon(
                    imageVector = when (editorMode) {
                        EditorMode.SPLIT -> Icons.Filled.ViewSidebar
                        EditorMode.EDIT -> Icons.Filled.EditNote
                        EditorMode.PREVIEW -> Icons.Filled.Preview
                    },
                    contentDescription = when (editorMode) {
                        EditorMode.SPLIT -> "ÂàáÊç¢Âà∞ÁºñËæëÊ®°Âºè"
                        EditorMode.EDIT -> "ÂàáÊç¢Âà∞È¢ÑËßàÊ®°Âºè"
                        EditorMode.PREVIEW -> "ÂàáÊç¢Âà∞ÂàÜÂ±èÊ®°Âºè"
                    },
                    tint = MaterialTheme.colorScheme.onPrimary
                )
            }
            
            // Êñá‰ª∂ÁÆ°ÁêÜÊåâÈíÆ
            IconButton(onClick = onFileManagerClick) {
                Icon(Icons.Filled.Menu, "Êñá‰ª∂ÁÆ°ÁêÜ", tint = MaterialTheme.colorScheme.onPrimary)
            }
            
            // ‰øùÂ≠òÊåâÈíÆÔºàÂ∏¶Áä∂ÊÄÅÊåáÁ§∫Ôºâ
            IconButton(onClick = onSaveClick) {
                if (hasUnsavedChanges) {
                    @OptIn(ExperimentalMaterial3Api::class)
                    BadgedBox(
                        badge = { Badge(containerColor = MaterialTheme.colorScheme.error) }
                    ) {
                        Icon(Icons.Filled.Menu, "‰øùÂ≠òÊñá‰ª∂", tint = MaterialTheme.colorScheme.onPrimary)
                    }
                } else {
                    Icon(Icons.Filled.Menu, "‰øùÂ≠òÊñá‰ª∂", tint = MaterialTheme.colorScheme.onPrimary)
                }
            }
            
            // Êõ¥Â§öÊìç‰ΩúËèúÂçï
            Box {
                IconButton(onClick = { showMoreMenu = true }) {
                    Icon(Icons.Filled.MoreVert, "Êõ¥Â§öÊìç‰Ωú", tint = MaterialTheme.colorScheme.onPrimary)
                }
                
                DropdownMenu(
                    expanded = showMoreMenu,
                    onDismissRequest = { showMoreMenu = false }
                ) {
                    DropdownMenuItem(
                        text = { Text("ÂØºÂÖ•/ÂØºÂá∫") },
                        onClick = {
                            showMoreMenu = false
                            onImportExportClick()
                        },
                        leadingIcon = {
                            Icon(Icons.Filled.Menu, contentDescription = null)
                        }
                    )
                    
                    DropdownMenuItem(
                        text = { Text("ÈáçÂëΩÂêç") },
                        onClick = {
                            showMoreMenu = false
                            showRenameDialog = true
                        },
                        leadingIcon = {
                            Icon(Icons.Filled.Edit, contentDescription = null)
                        }
                    )
                }
            }
        }
    }
    
    // ÈáçÂëΩÂêçÂØπËØùÊ°Ü
    if (showRenameDialog) {
        AlertDialog(
            onDismissRequest = { showRenameDialog = false },
            title = { Text("ÈáçÂëΩÂêçÊñá‰ª∂") },
            text = {
                OutlinedTextField(
                    value = fileName,
                    onValueChange = onFileNameChange,
                    label = { Text("Êñá‰ª∂Âêç") },
                    modifier = Modifier.fillMaxWidth()
                )
            },
            confirmButton = {
                TextButton(onClick = { showRenameDialog = false }) {
                    Text("Á°ÆÂÆö")
                }
            },
            dismissButton = {
                TextButton(onClick = { showRenameDialog = false }) {
                    Text("ÂèñÊ∂à")
                }
            }
        )
    }


/**
 * ÊâìÂºÄÊñá‰ª∂ÂØπËØùÊ°Ü
 */
@Composable
fun OpenFileDialog(
    files: List<String>,
    onFileSelected: (String) -> Unit,
    onCancel: () -> Unit
) {
    AlertDialog(
        onDismissRequest = onCancel,
        title = { Text("ÊâìÂºÄÊñá‰ª∂") },
        text = {
            Column(modifier = Modifier.height(200.dp)) {
                Text(
                    text = "ÈÄâÊã©Ë¶ÅÊâìÂºÄÁöÑÊñá‰ª∂:",
                    style = MaterialTheme.typography.bodyMedium,
                    modifier = Modifier.padding(bottom = 8.dp)
                )
                
                if (files.isEmpty()) {
                    Text(
                        text = "Â∑•‰ΩúÂå∫ÊöÇÊó†Êñá‰ª∂",
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                } else {
                    LazyColumn {
                        items(files) { file ->
                            ListItem(
                                headlineContent = { Text(file) },
                                modifier = Modifier.clickable { onFileSelected(file) }
                            )
                            Divider()
                        }
                    }
                }
            }
        },
        confirmButton = {
            TextButton(onClick = onCancel) {
                Text("ÂÖ≥Èó≠")
            }
        }
    )
}
}