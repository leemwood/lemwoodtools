# Parse test results and generate summary
# This script reads JUnit XML files and generates a human-readable summary

param(
    [string]$TestResultsDir = "app\build\test-results\testDebugUnitTest",
    [string]$LintResultsDir = "app\build\reports",
    [string]$OutputFile = "test-summary.md"
)

# Initialize output
$output = @"
# üß™ Test Results Summary

Generated on: $(Get-Date)

"@

# Parse unit test results
if (Test-Path $TestResultsDir) {
    $output += @"
## Unit Tests

"@
    
    $totalTests = 0
    $failedTests = 0
    $skippedTests = 0
    
    $xmlFiles = Get-ChildItem -Path $TestResultsDir -Filter "TEST-*.xml"
    
    foreach ($xmlFile in $xmlFiles) {
        try {
            [xml]$xml = Get-Content $xmlFile.FullName
            $testSuite = $xml.testsuite
            
            $tests = [int]$testSuite.tests
            $failures = [int]$testSuite.failures
            $skipped = [int]$testSuite.skipped
            
            $totalTests += $tests
            $failedTests += $failures
            $skippedTests += $skipped
            
            $output += "- **$($xmlFile.Name)**: $tests tests, $failures failures, $skipped skipped`n"
        }
        catch {
            $output += "- **$($xmlFile.Name)**: Error parsing file - $($_.Exception.Message)`n"
        }
    }
    
    $passedTests = $totalTests - $failedTests - $skippedTests
    
    $output += @"

### Summary
- **Total Tests**: $totalTests
- **Passed**: $passedTests
- **Failed**: $failedTests
- **Skipped**: $skippedTests
"@
    
    if ($failedTests -eq 0) {
        $output += "- **Status**: ‚úÖ All tests passed!`n"
    } else {
        $output += "- **Status**: ‚ùå $failedTests test(s) failed`n"
    }
} else {
    $output += @"
## Unit Tests

‚ùå No test results found in $TestResultsDir
"@
}

$output += "`n"

# Parse lint results
if (Test-Path $LintResultsDir) {
    $output += @"
## Lint Results

"@
    
    $lintFiles = Get-ChildItem -Path $LintResultsDir -Filter "lint-results-*.xml" -ErrorAction SilentlyContinue
    
    if ($lintFiles) {
        foreach ($lintFile in $lintFiles) {
            try {
                [xml]$xml = Get-Content $lintFile.FullName
                
                $errors = ($xml.SelectNodes("//issue[@severity='Error']")).Count
                $warnings = ($xml.SelectNodes("//issue[@severity='Warning']")).Count
                $info = ($xml.SelectNodes("//issue[@severity='Information']")).Count
                
                $output += @"
- **$($lintFile.Name)**:
  - Errors: $errors
  - Warnings: $warnings
  - Info: $info

"@
            }
            catch {
                $output += "- **$($lintFile.Name)**: Error parsing file - $($_.Exception.Message)`n"
            }
        }
    } else {
        $output += "‚ö†Ô∏è No lint result files found`n"
    }
} else {
    $output += "‚ùå Lint results directory not found: $LintResultsDir`n"
}

$output += @"

---
*Generated by parse-test-results.ps1*
"@

# Write output to file
$output | Out-File -FilePath $OutputFile -Encoding UTF8

Write-Host "Test summary generated: $OutputFile"
Write-Host ""
Write-Host $output