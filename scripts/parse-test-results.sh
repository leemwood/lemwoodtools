#!/bin/bash

# Parse test results and generate summary
# This script reads JUnit XML files and generates a human-readable summary

set -e

TEST_RESULTS_DIR="app/build/test-results/testDebugUnitTest"
LINT_RESULTS_DIR="app/build/reports"
OUTPUT_FILE="test-summary.md"

echo "# 🧪 Test Results Summary" > $OUTPUT_FILE
echo "" >> $OUTPUT_FILE
echo "Generated on: $(date)" >> $OUTPUT_FILE
echo "" >> $OUTPUT_FILE

# Parse unit test results
if [ -d "$TEST_RESULTS_DIR" ]; then
    echo "## Unit Tests" >> $OUTPUT_FILE
    echo "" >> $OUTPUT_FILE
    
    total_tests=0
    failed_tests=0
    skipped_tests=0
    
    for xml_file in $TEST_RESULTS_DIR/TEST-*.xml; do
        if [ -f "$xml_file" ]; then
            # Extract test counts using grep and sed
            tests=$(grep -o 'tests="[0-9]*"' "$xml_file" | sed 's/tests="\([0-9]*\)"/\1/' || echo "0")
            failures=$(grep -o 'failures="[0-9]*"' "$xml_file" | sed 's/failures="\([0-9]*\)"/\1/' || echo "0")
            skipped=$(grep -o 'skipped="[0-9]*"' "$xml_file" | sed 's/skipped="\([0-9]*\)"/\1/' || echo "0")
            
            total_tests=$((total_tests + tests))
            failed_tests=$((failed_tests + failures))
            skipped_tests=$((skipped_tests + skipped))
            
            echo "- **$(basename "$xml_file")**: $tests tests, $failures failures, $skipped skipped" >> $OUTPUT_FILE
        fi
    done
    
    echo "" >> $OUTPUT_FILE
    echo "### Summary" >> $OUTPUT_FILE
    echo "- **Total Tests**: $total_tests" >> $OUTPUT_FILE
    echo "- **Passed**: $((total_tests - failed_tests - skipped_tests))" >> $OUTPUT_FILE
    echo "- **Failed**: $failed_tests" >> $OUTPUT_FILE
    echo "- **Skipped**: $skipped_tests" >> $OUTPUT_FILE
    
    if [ $failed_tests -eq 0 ]; then
        echo "- **Status**: ✅ All tests passed!" >> $OUTPUT_FILE
    else
        echo "- **Status**: ❌ $failed_tests test(s) failed" >> $OUTPUT_FILE
    fi
    
else
    echo "## Unit Tests" >> $OUTPUT_FILE
    echo "" >> $OUTPUT_FILE
    echo "❌ No test results found in $TEST_RESULTS_DIR" >> $OUTPUT_FILE
fi

echo "" >> $OUTPUT_FILE

# Parse lint results
if [ -d "$LINT_RESULTS_DIR" ]; then
    echo "## Lint Results" >> $OUTPUT_FILE
    echo "" >> $OUTPUT_FILE
    
    lint_files=$(find "$LINT_RESULTS_DIR" -name "lint-results-*.xml" 2>/dev/null || true)
    
    if [ -n "$lint_files" ]; then
        for lint_file in $lint_files; do
            if [ -f "$lint_file" ]; then
                # Count lint issues
                errors=$(grep -c 'severity="Error"' "$lint_file" 2>/dev/null || echo "0")
                warnings=$(grep -c 'severity="Warning"' "$lint_file" 2>/dev/null || echo "0")
                info=$(grep -c 'severity="Information"' "$lint_file" 2>/dev/null || echo "0")
                
                echo "- **$(basename "$lint_file")**:" >> $OUTPUT_FILE
                echo "  - Errors: $errors" >> $OUTPUT_FILE
                echo "  - Warnings: $warnings" >> $OUTPUT_FILE
                echo "  - Info: $info" >> $OUTPUT_FILE
                echo "" >> $OUTPUT_FILE
            fi
        done
    else
        echo "⚠️ No lint result files found" >> $OUTPUT_FILE
    fi
else
    echo "❌ Lint results directory not found: $LINT_RESULTS_DIR" >> $OUTPUT_FILE
fi

echo "" >> $OUTPUT_FILE
echo "---" >> $OUTPUT_FILE
echo "*Generated by parse-test-results.sh*" >> $OUTPUT_FILE

echo "Test summary generated: $OUTPUT_FILE"
cat $OUTPUT_FILE