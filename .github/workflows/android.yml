name: Android CI

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'debug'
        type: choice
        options:
        - debug
        - staging
        - release

permissions:
  contents: write
  actions: read
  checks: write
  pull-requests: write
  statuses: write

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dorg.gradle.parallel=true

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
      with:
        gradle-home-cache-cleanup: true
        cache-read-only: ${{ github.event_name == 'pull_request' }}
        
    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Validate Gradle wrapper
      uses: gradle/actions/wrapper-validation@v4
      
    - name: Run Unit Tests
      run: ./gradlew testDebugUnitTest --continue
      
    - name: Run Lint
      run: ./gradlew lintDebug --continue
      if: always()
      
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ github.run_number }}
        path: |
          app/build/reports/tests/testDebugUnitTest/
          app/build/test-results/testDebugUnitTest/
        retention-days: 30
        
    - name: Upload Lint Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: lint-results-${{ github.run_number }}
        path: |
          app/build/reports/lint-results-debug.html
          app/build/reports/lint-results-debug.xml
        retention-days: 30
        
    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Unit Test Results
        path: app/build/test-results/testDebugUnitTest/*.xml
        reporter: java-junit
        fail-on-error: false

  build:
    name: Build APK
    runs-on: ubuntu-latest
    needs: test
    outputs:
      version_name: ${{ steps.version.outputs.version_name }}
      version_code: ${{ steps.version.outputs.version_code }}
      release_built: ${{ steps.build_release.outputs.release_built }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
      with:
        gradle-home-cache-cleanup: true
        cache-read-only: ${{ github.event_name == 'pull_request' }}
        
    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Validate Gradle wrapper
      uses: gradle/actions/wrapper-validation@v4
      
    - name: Get version info
      id: version
      run: |
        VERSION_NAME=$(grep "versionName" app/build.gradle | head -1 | sed 's/.*versionName[[:space:]]*"\([^"]*\)".*/\1/')
        VERSION_CODE=$(grep "versionCode" app/build.gradle | head -1 | sed 's/.*versionCode[[:space:]]*\([0-9]*\).*/\1/')
        echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
        echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
        echo "Version: $VERSION_NAME ($VERSION_CODE)"
      
    - name: Decode Keystore
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        ENCODED_STRING: ${{ secrets.SIGNING_KEYSTORE }}
      run: |
        if [ ! -z "$ENCODED_STRING" ]; then
          echo $ENCODED_STRING | base64 -di > app/lemwood.jks
          echo "Keystore decoded successfully"
        else
          echo "No keystore found in secrets"
        fi
        
    - name: Build Debug APK
      run: ./gradlew assembleDebug
      
    - name: Build Staging APK
      if: github.ref == 'refs/heads/develop' || github.event.inputs.build_type == 'staging'
      run: ./gradlew assembleStaging
      
    - name: Build Release APK
      id: build_release
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
        SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
        SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
      run: |
        if [ ! -z "$SIGNING_KEY_ALIAS" ] && [ -f "app/lemwood.jks" ]; then
          ./gradlew assembleRelease
          if [ -f "app/build/outputs/apk/release/app-release.apk" ]; then
            echo "release_built=true" >> $GITHUB_OUTPUT
            echo "Release APK built successfully"
          else
            echo "release_built=false" >> $GITHUB_OUTPUT
            echo "Release APK build failed"
          fi
        else
          echo "release_built=false" >> $GITHUB_OUTPUT
          echo "Signing secrets not found or keystore missing, skipping release build"
        fi
        
    - name: Upload Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: debug-apk-${{ github.run_number }}
        path: app/build/outputs/apk/debug/app-debug.apk
        retention-days: 30

    - name: Upload Staging APK
      if: github.ref == 'refs/heads/develop' || github.event.inputs.build_type == 'staging'
      uses: actions/upload-artifact@v4
      with:
        name: staging-apk-${{ github.run_number }}
        path: app/build/outputs/apk/staging/app-staging.apk
        retention-days: 30
        
    - name: Upload Release APK
      if: steps.build_release.outputs.release_built == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: release-apk-${{ github.run_number }}
        path: app/build/outputs/apk/release/app-release.apk
        retention-days: 90

  deploy:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.build.outputs.release_built == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        
    - name: Download Release APK
      uses: actions/download-artifact@v4
      with:
        name: release-apk-${{ github.run_number }}
        path: ./artifacts
        
    - name: Rename APK
      run: |
        mv ./artifacts/app-release.apk ./artifacts/LemwoodTools-v${{ needs.build.outputs.version_name }}.apk
        ls -la ./artifacts/
        
    - name: Generate Changelog
      id: changelog
      run: |
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -z "$LATEST_TAG" ]; then
          echo "changelog=Initial release" >> $GITHUB_OUTPUT
        else
          # Get commits since last tag
          CHANGELOG=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s" --no-merges | head -20)
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="- Minor updates and improvements"
          fi
          # Escape newlines for GitHub output
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          echo "changelog=$CHANGELOG" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.build.outputs.version_name }}
        release_name: LemwoodTools v${{ needs.build.outputs.version_name }}
        body: |
          ## 🚀 LemwoodTools v${{ needs.build.outputs.version_name }}
          
          ### 📱 下载
          - [Android APK](https://github.com/${{ github.repository }}/releases/download/v${{ needs.build.outputs.version_name }}/LemwoodTools-v${{ needs.build.outputs.version_name }}.apk)
          
          ### 📋 更新日志
          ${{ steps.changelog.outputs.changelog }}
          
          ### 📊 构建信息
          - 版本号: ${{ needs.build.outputs.version_name }}
          - 构建号: ${{ needs.build.outputs.version_code }}
          - 构建时间: ${{ github.event.head_commit.timestamp }}
          - 提交: ${{ github.sha }}
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/LemwoodTools-v${{ needs.build.outputs.version_name }}.apk
        asset_name: LemwoodTools-v${{ needs.build.outputs.version_name }}.apk
        asset_content_type: application/vnd.android.package-archive

  notify:
    name: Build Notification
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()
    
    steps:
    - name: Notify Build Success
      if: needs.build.result == 'success'
      run: |
        echo "✅ Build completed successfully!"
        echo "Version: ${{ needs.build.outputs.version_name }}"
        echo "Build number: ${{ needs.build.outputs.version_code }}"
        if [ "${{ needs.build.outputs.release_built }}" == "true" ]; then
          echo "🚀 Release APK built and deployed!"
        else
          echo "📱 Debug/Staging APK built successfully!"
        fi
        
    - name: Notify Build Failure
      if: needs.build.result == 'failure'
      run: |
        echo "❌ Build failed!"
        echo "Please check the build logs for details."
        exit 1