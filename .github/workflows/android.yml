name: Android CI/CD

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dorg.gradle.parallel=true
  GRADLE_USER_HOME: ${{ github.workspace }}/.gradle

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
      with:
        gradle-home-cache-cleanup: true
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Run lint
      run: ./gradlew lintDebug
      
    - name: Upload lint reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lint-reports
        path: app/build/reports/lint-results-debug.html
        
    - name: Run unit tests
      run: ./gradlew testDebugUnitTest
      
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports
        path: app/build/reports/tests/testDebugUnitTest/

  build:
    name: Build APK
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
      with:
        gradle-home-cache-cleanup: true
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Decode Keystore
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        ENCODED_STRING: ${{ secrets.SIGNING_KEYSTORE }}
      run: |
        if [ ! -z "$ENCODED_STRING" ]; then
          echo $ENCODED_STRING | base64 -di > app/release-key.keystore
        fi
        
    - name: Build Debug APK
      run: ./gradlew assembleDebug
      
    - name: Build Release APK
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
        SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
        SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
      run: |
        if [ ! -z "$SIGNING_KEY_ALIAS" ]; then
          ./gradlew assembleRelease
        else
          echo "Signing secrets not found, skipping release build"
        fi
        
    - name: Upload Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: debug-apk
        path: app/build/outputs/apk/debug/app-debug.apk
        
    - name: Upload Release APK
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: actions/upload-artifact@v4
      with:
        name: release-apk
        path: app/build/outputs/apk/release/app-release.apk

  deploy:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Release APK
      uses: actions/download-artifact@v4
      with:
        name: release-apk
        path: ./
        
    - name: Get version info
      id: version
      run: |
        VERSION_NAME=$(grep "versionName" app/build.gradle | awk '{print $2}' | tr -d '"')
        VERSION_CODE=$(grep "versionCode" app/build.gradle | awk '{print $2}')
        echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
        echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
        echo "tag_name=v$VERSION_NAME" >> $GITHUB_OUTPUT
        
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag_name }}
        name: 柠枺工具箱 ${{ steps.version.outputs.version_name }}
        body: |
          ## 柠枺工具箱 ${{ steps.version.outputs.version_name }}
          
          ### 更新内容
          - 自动构建版本
          - 版本号: ${{ steps.version.outputs.version_code }}
          
          ### 下载
          - [Android APK](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.tag_name }}/lemwood-tools-${{ steps.version.outputs.version_name }}.apk)
          
          ### 系统要求
          - Android 7.1 (API 25) 或更高版本
        draft: false
        prerelease: false
        files: |
          ./app-release.apk